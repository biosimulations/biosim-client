"""
biosim-server

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

The version of the OpenAPI document: 0.0.1
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""

from __future__ import annotations

import json
import pprint
import re  # noqa: F401
from typing import Any, ClassVar, Dict, List, Optional, Set

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing_extensions import Self

from biosim_client.api.biosim.models.biosim_simulation_run_status import BiosimSimulationRunStatus


class BiosimSimulationRun(BaseModel):
    """
    BiosimSimulationRun
    """

    id: StrictStr
    name: StrictStr
    simulator: StrictStr
    simulator_version: StrictStr = Field(alias="simulatorVersion")
    status: BiosimSimulationRunStatus
    simulator_digest: Optional[StrictStr] = Field(default=None, alias="simulatorDigest")
    cpus: Optional[StrictInt] = None
    memory: Optional[StrictInt] = None
    max_time: Optional[StrictInt] = Field(default=None, alias="maxTime")
    env_vars: Optional[List[StrictStr]] = Field(default=None, alias="envVars")
    purpose: Optional[StrictStr] = None
    submitted: Optional[StrictStr] = None
    updated: Optional[StrictStr] = None
    project_size: Optional[StrictInt] = Field(default=None, alias="projectSize")
    results_size: Optional[StrictInt] = Field(default=None, alias="resultsSize")
    runtime: Optional[StrictInt] = None
    email: Optional[StrictStr] = None
    __properties: ClassVar[List[str]] = [
        "id",
        "name",
        "simulator",
        "simulatorVersion",
        "status",
        "simulatorDigest",
        "cpus",
        "memory",
        "maxTime",
        "envVars",
        "purpose",
        "submitted",
        "updated",
        "projectSize",
        "resultsSize",
        "runtime",
        "email",
    ]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of BiosimSimulationRun from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if simulator_digest (nullable) is None
        # and model_fields_set contains the field
        if self.simulator_digest is None and "simulator_digest" in self.model_fields_set:
            _dict["simulatorDigest"] = None

        # set to None if cpus (nullable) is None
        # and model_fields_set contains the field
        if self.cpus is None and "cpus" in self.model_fields_set:
            _dict["cpus"] = None

        # set to None if memory (nullable) is None
        # and model_fields_set contains the field
        if self.memory is None and "memory" in self.model_fields_set:
            _dict["memory"] = None

        # set to None if max_time (nullable) is None
        # and model_fields_set contains the field
        if self.max_time is None and "max_time" in self.model_fields_set:
            _dict["maxTime"] = None

        # set to None if env_vars (nullable) is None
        # and model_fields_set contains the field
        if self.env_vars is None and "env_vars" in self.model_fields_set:
            _dict["envVars"] = None

        # set to None if purpose (nullable) is None
        # and model_fields_set contains the field
        if self.purpose is None and "purpose" in self.model_fields_set:
            _dict["purpose"] = None

        # set to None if submitted (nullable) is None
        # and model_fields_set contains the field
        if self.submitted is None and "submitted" in self.model_fields_set:
            _dict["submitted"] = None

        # set to None if updated (nullable) is None
        # and model_fields_set contains the field
        if self.updated is None and "updated" in self.model_fields_set:
            _dict["updated"] = None

        # set to None if project_size (nullable) is None
        # and model_fields_set contains the field
        if self.project_size is None and "project_size" in self.model_fields_set:
            _dict["projectSize"] = None

        # set to None if results_size (nullable) is None
        # and model_fields_set contains the field
        if self.results_size is None and "results_size" in self.model_fields_set:
            _dict["resultsSize"] = None

        # set to None if runtime (nullable) is None
        # and model_fields_set contains the field
        if self.runtime is None and "runtime" in self.model_fields_set:
            _dict["runtime"] = None

        # set to None if email (nullable) is None
        # and model_fields_set contains the field
        if self.email is None and "email" in self.model_fields_set:
            _dict["email"] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of BiosimSimulationRun from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "name": obj.get("name"),
            "simulator": obj.get("simulator"),
            "simulatorVersion": obj.get("simulatorVersion"),
            "status": obj.get("status"),
            "simulatorDigest": obj.get("simulatorDigest"),
            "cpus": obj.get("cpus"),
            "memory": obj.get("memory"),
            "maxTime": obj.get("maxTime"),
            "envVars": obj.get("envVars"),
            "purpose": obj.get("purpose"),
            "submitted": obj.get("submitted"),
            "updated": obj.get("updated"),
            "projectSize": obj.get("projectSize"),
            "resultsSize": obj.get("resultsSize"),
            "runtime": obj.get("runtime"),
            "email": obj.get("email"),
        })
        return _obj
